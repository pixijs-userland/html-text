{"version":3,"file":"pixi-text-html.js","sources":["../src/HTMLTextStyle.ts","../src/HTMLText.ts"],"sourcesContent":["import { settings, utils } from '@pixi/core';\nimport { TextStyle, TextStyleFontStyle, TextStyleFontWeight, TextStyleLineJoin } from '@pixi/text';\n\nimport type { ITextStyle, TextStyleTextBaseline } from '@pixi/text';\n\n// HTMLText support more white-space options\ntype HTMLTextStyleWhiteSpace = 'normal' | 'pre' | 'pre-line' | 'nowrap' | 'pre-wrap';\n\n// Subset of ITextStyle\ntype ITextStyleIgnore = 'whiteSpace'\n| 'fillGradientStops'\n| 'fillGradientType'\n| 'miterLimit'\n| 'textBaseline'\n| 'trim'\n| 'leading'\n| 'lineJoin';\n\n/**\n * Modifed versions from ITextStyle.\n * @extends ITextStyle\n */\ninterface IHTMLTextStyle extends Omit<ITextStyle, ITextStyleIgnore>\n{\n    /**\n     * White-space with expanded options\n     * @type {'normal'|'pre'|'pre-line'|'nowrap'|'pre-wrap'}\n     */\n    whiteSpace: HTMLTextStyleWhiteSpace;\n}\n\n/**\n * Font information for HTMLText\n */\ninterface IHTMLFont\n{\n    /** User-supplied URL request */\n    originalUrl: string;\n    /** Base64 string for font */\n    dataSrc: string;\n    /** FontFace installed in the document */\n    fontFace: FontFace | null;\n    /** Blob-based URL for font */\n    src: string;\n    /** Family name of font */\n    family: string;\n    /** Weight of the font */\n    weight: TextStyleFontWeight;\n    /** Style of the font */\n    style: TextStyleFontStyle;\n    /** Reference counter */\n    refs: number;\n}\n\n/**\n * Used internally to restrict text style usage and convert easily to CSS.\n * @class\n * @extends PIXI.TextStyle\n * @see {@link https://pixijs.download/dev/docs/PIXI.TextStyle.html PIXI.TextStyle}\n * @param {PIXI.ITextStyle|IHTMLTextStyle} [style] - Style to copy.\n */\nclass HTMLTextStyle extends TextStyle\n{\n    /** The collection of installed fonts */\n    public static availableFonts: Record<string, IHTMLFont> = {};\n\n    /**\n     * List of default options, these are largely the same as TextStyle,\n     * with the exception of whiteSpace, which is set to 'normal' by default.\n     */\n    public static readonly defaultOptions: IHTMLTextStyle = {\n        /** Align */\n        align: 'left',\n        /** Break words */\n        breakWords: false,\n        /** Drop shadow */\n        dropShadow: false,\n        /** Drop shadow alpha */\n        dropShadowAlpha: 1,\n        /**\n         * Drop shadow angle\n         * @type {number}\n         * @default Math.PI / 6\n         */\n        dropShadowAngle: Math.PI / 6,\n        /** Drop shadow blur */\n        dropShadowBlur: 0,\n        /** Drop shadow color */\n        dropShadowColor: 'black',\n        /** Drop shadow distance */\n        dropShadowDistance: 5,\n        /** Fill */\n        fill: 'black',\n        /** Font family */\n        fontFamily: 'Arial',\n        /** Font size */\n        fontSize: 26,\n        /** Font style */\n        fontStyle: 'normal',\n        /** Font variant */\n        fontVariant: 'normal',\n        /** Font weight */\n        fontWeight: 'normal',\n        /** Letter spacing */\n        letterSpacing: 0,\n        /** Line height */\n        lineHeight: 0,\n        /** Padding */\n        padding: 0,\n        /** Stroke */\n        stroke: 'black',\n        /** Stroke thickness */\n        strokeThickness: 0,\n        /** White space */\n        whiteSpace: 'normal',\n        /** Word wrap */\n        wordWrap: false,\n        /** Word wrap width */\n        wordWrapWidth: 100,\n    };\n\n    /** For using custom fonts */\n    private _fonts: IHTMLFont[] = [];\n\n    /** List of internal style rules */\n    private _overrides: string[] = [];\n\n    /** Global rules or stylesheet, useful for creating rules for rendering */\n    private _stylesheet = '';\n\n    /** Track font changes internally */\n    private fontsDirty = false;\n\n    /**\n     * Convert a TextStyle to HTMLTextStyle\n     * @example\n     * import {TextStyle } from 'pixi.js';\n     * import {HTMLTextStyle} from '@pixi/text-html';\n     * const style = new TextStyle();\n     * const htmlStyle = HTMLTextStyle.from(style);\n     */\n    static from(originalStyle: TextStyle | Partial<IHTMLTextStyle>): HTMLTextStyle\n    {\n        return new HTMLTextStyle(Object.keys(HTMLTextStyle.defaultOptions)\n            .reduce((obj, prop) => ({ ...obj, [prop]: originalStyle[prop as keyof IHTMLTextStyle] }), {})\n        );\n    }\n\n    /** Clear the current font */\n    public cleanFonts(): void\n    {\n        if (this._fonts.length > 0)\n        {\n            this._fonts.forEach((font) =>\n            {\n                URL.revokeObjectURL(font.src);\n                font.refs--;\n                if (font.refs === 0)\n                {\n                    if (font.fontFace)\n                    {\n                        document.fonts.delete(font.fontFace);\n                    }\n                    delete HTMLTextStyle.availableFonts[font.originalUrl];\n                }\n            });\n            this.fontFamily = 'Arial';\n            this._fonts.length = 0;\n            this.styleID++;\n            this.fontsDirty = true;\n        }\n    }\n\n    /** Because of how HTMLText renders, fonts need to be imported */\n    public loadFont(url: string, options: Partial<Pick<IHTMLFont, 'weight' | 'style' | 'family'>> = {}): Promise<void>\n    {\n        const { availableFonts } = HTMLTextStyle;\n\n        // Font is already installed\n        if (availableFonts[url])\n        {\n            const font = availableFonts[url];\n\n            this._fonts.push(font);\n            font.refs++;\n            this.styleID++;\n            this.fontsDirty = true;\n\n            return Promise.resolve();\n        }\n\n        return settings.ADAPTER.fetch(url)\n            .then((response) => response.blob())\n            .then(async (blob) => new Promise<[string, string]>((resolve, reject) =>\n            {\n                const src = URL.createObjectURL(blob);\n                const reader = new FileReader();\n\n                reader.onload = () => resolve([src, reader.result as string]);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            }))\n            .then(async ([src, dataSrc]) =>\n            {\n                const font: IHTMLFont = Object.assign({\n                    family: utils.path.basename(url, utils.path.extname(url)),\n                    weight: 'normal',\n                    style: 'normal',\n                    src,\n                    dataSrc,\n                    refs: 1,\n                    originalUrl: url,\n                    fontFace: null,\n                }, options);\n\n                availableFonts[url] = font;\n                this._fonts.push(font);\n                this.styleID++;\n\n                // Load it into the current DOM so we can properly measure it!\n                const fontFace = new FontFace(font.family, `url(${font.src})`, {\n                    weight: font.weight,\n                    style: font.style,\n                });\n\n                // Keep this reference so we can remove it later from document\n                font.fontFace = fontFace;\n\n                await fontFace.load();\n                document.fonts.add(fontFace);\n                await document.fonts.ready;\n\n                this.styleID++;\n                this.fontsDirty = true;\n            });\n    }\n\n    /**\n     * Add a style override, this can be any CSS property\n     * it will override any built-in style. This is the\n     * property and the value as a string (e.g., `color: red`).\n     * This will override any other internal style.\n     * @param {string} value - CSS style(s) to add.\n     * @example\n     * style.addOverride('background-color: red');\n     */\n    public addOverride(...value: string[]): void\n    {\n        const toAdd = value.filter((v) => !this._overrides.includes(v));\n\n        if (toAdd.length > 0)\n        {\n            this._overrides.push(...toAdd);\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Remove any overrides that match the value.\n     * @param {string} value - CSS style to remove.\n     * @example\n     * style.removeOverride('background-color: red');\n     */\n    public removeOverride(...value: string[]): void\n    {\n        const toRemove = value.filter((v) => this._overrides.includes(v));\n\n        if (toRemove.length > 0)\n        {\n            this._overrides = this._overrides.filter((v) => !toRemove.includes(v));\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Internally converts all of the style properties into CSS equivalents.\n     * @return The CSS style string, for setting `style` property of root HTMLElement.\n     */\n    public toCSS(scale: number): string\n    {\n        return [\n            'display: inline-block',\n            `color: ${this.normalizeColor(this.fill)}`,\n            `font-size: ${(this.fontSize as number) * scale}px`,\n            `font-family: ${this.fontFamily}`,\n            `font-weight: ${this.fontWeight}`,\n            `font-style: ${this.fontStyle}`,\n            `font-variant: ${this.fontVariant}`,\n            `letter-spacing: ${this.letterSpacing * scale}px`,\n            `text-align: ${this.align}`,\n            `padding: ${this.padding * scale}px`,\n            `white-space: ${this.whiteSpace}`,\n            ...this.lineHeight ? [`line-height: ${this.lineHeight * scale}px`] : [],\n            ...this.wordWrap ? [\n                `word-wrap: ${this.breakWords ? 'break-all' : 'break-word'}`,\n                `max-width: ${this.wordWrapWidth * scale}px`\n            ] : [],\n            ...this.strokeThickness ? [\n                `-webkit-text-stroke-width: ${this.strokeThickness * scale}px`,\n                `-webkit-text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                `text-stroke-width: ${this.strokeThickness * scale}px`,\n                `text-stroke-color: ${this.normalizeColor(this.stroke)}`,\n                'paint-order: stroke',\n            ] : [],\n            ...this.dropShadow ? [this.dropShadowToCSS(scale)] : [],\n            ...this._overrides,\n        ].join(';');\n    }\n\n    /** Get the font CSS styles from the loaded font, If available. */\n    public toGlobalCSS(): string\n    {\n        return this._fonts.reduce((result, font) => (\n            `${result}\n            @font-face {\n                font-family: \"${font.family}\";\n                src: url('${font.dataSrc}');\n                font-weight: ${font.weight};\n                font-style: ${font.style}; \n            }`\n        ), this._stylesheet);\n    }\n\n    /** Internal stylesheet contents, useful for creating rules for rendering */\n    public get stylesheet(): string\n    {\n        return this._stylesheet;\n    }\n    public set stylesheet(value: string)\n    {\n        if (this._stylesheet !== value)\n        {\n            this._stylesheet = value;\n            this.styleID++;\n        }\n    }\n\n    /** Convert numerical colors into hex-strings */\n    private normalizeColor(color: any): string\n    {\n        if (Array.isArray(color))\n        {\n            color = utils.rgb2hex(color);\n        }\n\n        if (typeof color === 'number')\n        {\n            return utils.hex2string(color);\n        }\n\n        return color;\n    }\n\n    /** Convert the internal drop-shadow settings to CSS text-shadow */\n    private dropShadowToCSS(scale: number): string\n    {\n        let color = this.normalizeColor(this.dropShadowColor);\n        const alpha = this.dropShadowAlpha;\n        const x = Math.round(Math.cos(this.dropShadowAngle) * this.dropShadowDistance);\n        const y = Math.round(Math.sin(this.dropShadowAngle) * this.dropShadowDistance);\n\n        // Append alpha to color\n        if (color.startsWith('#') && alpha < 1)\n        {\n            color += (alpha * 255 | 0).toString(16).padStart(2, '0');\n        }\n\n        const position = `${x * scale}px ${y * scale}px`;\n\n        if (this.dropShadowBlur > 0)\n        {\n            return `text-shadow: ${position} ${this.dropShadowBlur}px ${color}`;\n        }\n\n        return `text-shadow: ${position} ${color}`;\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        Object.assign(this, HTMLTextStyle.defaultOptions);\n    }\n\n    /**\n     * Called after the image is loaded but before drawing to the canvas.\n     * Mostly used to handle Safari's font loading bug.\n     * @ignore\n     */\n    public onBeforeDraw()\n    {\n        const { fontsDirty: prevFontsDirty } = this;\n\n        this.fontsDirty = false;\n\n        // Safari has a known bug where embedded fonts are not available\n        // immediately after the image loads, to compensate we wait an\n        // arbitrary amount of time\n        // @see https://bugs.webkit.org/show_bug.cgi?id=219770\n        if (this.isSafari && this._fonts.length > 0 && prevFontsDirty)\n        {\n            return new Promise<void>((resolve) => setTimeout(resolve, 100));\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Proving that Safari is the new IE\n     * @ignore\n     */\n    private get isSafari(): boolean\n    {\n        const { userAgent } = settings.ADAPTER.getNavigator();\n\n        return (/^((?!chrome|android).)*safari/i).test(userAgent);\n    }\n\n    /** @ignore fillGradientStops is not supported by HTMLText */\n    override set fillGradientStops(_value: number[])\n    {\n        console.warn('[HTMLTextStyle] fillGradientStops is not supported by HTMLText');\n    }\n    override get fillGradientStops()\n    {\n        return super.fillGradientStops;\n    }\n\n    /** @ignore fillGradientType is not supported by HTMLText */\n    override set fillGradientType(_value: number)\n    {\n        console.warn('[HTMLTextStyle] fillGradientType is not supported by HTMLText');\n    }\n    override get fillGradientType()\n    {\n        return super.fillGradientType;\n    }\n\n    /** @ignore miterLimit is not supported by HTMLText */\n    override set miterLimit(_value: number)\n    {\n        console.warn('[HTMLTextStyle] miterLimit is not supported by HTMLText');\n    }\n    override get miterLimit()\n    {\n        return super.miterLimit;\n    }\n\n    /** @ignore trim is not supported by HTMLText */\n    override set trim(_value: boolean)\n    {\n        console.warn('[HTMLTextStyle] trim is not supported by HTMLText');\n    }\n    override get trim()\n    {\n        return super.trim;\n    }\n\n    /** @ignore textBaseline is not supported by HTMLText */\n    override set textBaseline(_value: TextStyleTextBaseline)\n    {\n        console.warn('[HTMLTextStyle] textBaseline is not supported by HTMLText');\n    }\n    override get textBaseline()\n    {\n        return super.textBaseline;\n    }\n\n    /** @ignore leading is not supported by HTMLText */\n    override set leading(_value: number)\n    {\n        console.warn('[HTMLTextStyle] leading is not supported by HTMLText');\n    }\n    override get leading()\n    {\n        return super.leading;\n    }\n\n    /** @ignore lineJoin is not supported by HTMLText */\n    override set lineJoin(_value: TextStyleLineJoin)\n    {\n        console.warn('[HTMLTextStyle] lineJoin is not supported by HTMLText');\n    }\n    override get lineJoin()\n    {\n        return super.lineJoin;\n    }\n}\n\nexport { HTMLTextStyle };\nexport type { IHTMLTextStyle, HTMLTextStyleWhiteSpace };\n","import { Sprite } from '@pixi/sprite';\nimport { Texture, Rectangle, settings, utils, ISize, ImageResource } from '@pixi/core';\nimport { TextStyle } from '@pixi/text';\nimport { HTMLTextStyle } from './HTMLTextStyle';\n\nimport type { ITextStyle } from '@pixi/text';\nimport type { Renderer, IRenderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * Text display object that support multi-style HTML text.\n * @class\n * @extends PIXI.Sprite\n * @see {@link https://pixijs.download/dev/docs/PIXI.Sprite.html PIXI.Sprite}\n * @see {@link https://pixijs.download/dev/docs/PIXI.TextStyle.html PIXI.TextStyle}\n */\nexport class HTMLText extends Sprite\n{\n    /**\n     * Default opens when destroying.\n     * @type {PIXI.IDestroyOptions}\n     * @property {boolean} texture=true - Whether to destroy the texture.\n     * @property {boolean} children=false - Whether to destroy the children.\n     * @property {boolean} baseTexture=true - Whether to destroy the base texture.\n     */\n    public static defaultDestroyOptions: IDestroyOptions = {\n        texture: true,\n        children: false,\n        baseTexture: true,\n    };\n\n    /** Default maxWidth, set at construction */\n    public static defaultMaxWidth = 2024;\n\n    /** Default maxHeight, set at construction */\n    public static defaultMaxHeight = 2024;\n\n    /** Default resolution, make sure autoResolution or defaultAutoResolution is `false`. */\n    public static defaultResolution: number | undefined;\n\n    /** Default autoResolution for all HTMLText objects */\n    public static defaultAutoResolution = true;\n\n    /** The maximum width in rendered pixels that the content can be, any larger will be hidden */\n    public maxWidth: number;\n\n    /** The maximum height in rendered pixels that the content can be, any larger will be hidden */\n    public maxHeight: number;\n\n    private _domElement: HTMLElement;\n    private _styleElement: HTMLElement;\n    private _svgRoot: SVGSVGElement;\n    private _foreignObject: SVGForeignObjectElement;\n    private _image: HTMLImageElement;\n    private _loadImage: HTMLImageElement;\n    private _resolution: number;\n    private _text: string | null = null;\n    private _style: HTMLTextStyle | null = null;\n    private _autoResolution = true;\n    private _loading = false;\n    private localStyleID = -1;\n    private dirty = false;\n\n    /** The HTMLTextStyle object is owned by this instance */\n    private ownsStyle = false;\n\n    /**\n     * @param {string} [text] - Text contents\n     * @param {HTMLTextStyle|PIXI.TextStyle|PIXI.ITextStyle} [style] - Style setting to use.\n     *        Strongly recommend using an HTMLTextStyle object. Providing a PIXI.TextStyle\n     *        will convert the TextStyle to an HTMLTextStyle and will no longer be linked.\n     */\n    constructor(text = '', style: HTMLTextStyle | TextStyle | Partial<ITextStyle> = {})\n    {\n        const image = new Image();\n        const texture = Texture.from<ImageResource>(image, {\n            scaleMode: settings.SCALE_MODE,\n            resourceOptions: {\n                autoLoad: false,\n            },\n        });\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        const nssvg = 'http://www.w3.org/2000/svg';\n        const nsxhtml = 'http://www.w3.org/1999/xhtml';\n        const svgRoot = document.createElementNS(nssvg, 'svg');\n        const foreignObject = document.createElementNS(nssvg, 'foreignObject');\n        const domElement = document.createElementNS(nsxhtml, 'div');\n        const styleElement = document.createElementNS(nsxhtml, 'style');\n\n        // Arbitrary max size\n        foreignObject.setAttribute('width', '10000');\n        foreignObject.setAttribute('height', '10000');\n        foreignObject.style.overflow = 'hidden';\n        svgRoot.appendChild(foreignObject);\n\n        this.maxWidth = HTMLText.defaultMaxWidth;\n        this.maxHeight = HTMLText.defaultMaxHeight;\n        this._domElement = domElement;\n        this._styleElement = styleElement;\n        this._svgRoot = svgRoot;\n        this._foreignObject = foreignObject;\n        this._foreignObject.appendChild(styleElement);\n        this._foreignObject.appendChild(domElement);\n        this._image = image;\n        this._loadImage = new Image();\n        this._autoResolution = HTMLText.defaultAutoResolution;\n        this._resolution = HTMLText.defaultResolution ?? settings.RESOLUTION;\n        this.text = text;\n        this.style = style;\n    }\n\n    /**\n     * Calculate the size of the output text without actually drawing it.\n     * This includes the `padding` in the `style` object.\n     * This can be used as a fast-pass to do things like text-fitting.\n     * @param {object} [overrides] - Overrides for the text, style, and resolution.\n     * @param {string} [overrides.text] - The text to measure, if not specified, the current text is used.\n     * @param {HTMLTextStyle} [overrides.style] - The style to measure, if not specified, the current style is used.\n     * @param {number} [overrides.resolution] - The resolution to measure, if not specified, the current resolution is used.\n     * @return {PIXI.ISize} Width and height of the measured text.\n     */\n    measureText(overrides?: { text?: string, style?: HTMLTextStyle, resolution?: number }): ISize\n    {\n        const { text, style, resolution } = Object.assign({\n            text: this._text,\n            style: this._style,\n            resolution: this._resolution,\n        }, overrides);\n\n        Object.assign(this._domElement, {\n            innerHTML: text,\n            style: style.toCSS(resolution),\n        });\n        this._styleElement.textContent = style.toGlobalCSS();\n\n        // Measure the contents using the shadow DOM\n        document.body.appendChild(this._svgRoot);\n        const contentBounds = this._domElement.getBoundingClientRect();\n\n        this._svgRoot.remove();\n\n        const contentWidth = Math.min(this.maxWidth, Math.ceil(contentBounds.width));\n        const contentHeight = Math.min(this.maxHeight, Math.ceil(contentBounds.height));\n\n        this._svgRoot.setAttribute('width', contentWidth.toString());\n        this._svgRoot.setAttribute('height', contentHeight.toString());\n\n        // Undo the changes to the DOM element\n        if (text !== this._text)\n        {\n            this._domElement.innerHTML = this._text as string;\n        }\n        if (style !== this._style)\n        {\n            Object.assign(this._domElement, { style: this._style?.toCSS(resolution) });\n            this._styleElement.textContent = this._style?.toGlobalCSS() as string;\n        }\n\n        return {\n            width: contentWidth + (style.padding * 2),\n            height: contentHeight + (style.padding * 2),\n        };\n    }\n\n    /**\n     * Manually refresh the text.\n     * @public\n     * @param {boolean} respectDirty - Whether to abort updating the\n     *        text if the Text isn't dirty and the function is called.\n     */\n    async updateText(respectDirty = true): Promise<void>\n    {\n        const { style, _image: image, _loadImage: loadImage } = this;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        const { width, height } = this.measureText();\n\n        // Make sure canvas is at least 1x1 so it drawable\n        // for sub-pixel sizes, round up to avoid clipping\n        // we update both images, to make sure bounds are correct synchronously\n        image.width = loadImage.width = Math.ceil((Math.max(1, width)));\n        image.height = loadImage.height = Math.ceil((Math.max(1, height)));\n\n        if (!this._loading)\n        {\n            this._loading = true;\n            await new Promise<void>((resolve) =>\n            {\n                loadImage.onload = async () =>\n                {\n                    // Fake waiting for the image to load\n                    await style.onBeforeDraw();\n                    this._loading = false;\n\n                    // Swap image and loadImage, we do this to avoid\n                    // flashes between updateText calls, usually when\n                    // the onload time is longer than updateText time\n                    image.src = loadImage.src;\n                    loadImage.onload = null;\n                    loadImage.src = '';\n\n                    // Force update the texture\n                    this.updateTexture();\n                    resolve();\n                };\n                const svgURL = new XMLSerializer().serializeToString(this._svgRoot);\n\n                loadImage.src = `data:image/svg+xml;charset=utf8,${encodeURIComponent(svgURL)}`;\n            });\n        }\n    }\n\n    /** The raw image element that is rendered under-the-hood. */\n    public get source(): HTMLImageElement\n    {\n        return this._image;\n    }\n\n    /**\n     * @deprecated since 3.2.0\n     * @see HTMLText#image\n     */\n    public get canvas(): HTMLImageElement\n    {\n        utils.deprecation('3.2.0', 'HTMLText property \"canvas\" is deprecated, use \"source\" instead.');\n\n        return this._image;\n    }\n\n    /**\n     * Update the texture resource.\n     * @private\n     */\n    updateTexture()\n    {\n        const { style, texture, _image: image, resolution } = this;\n        const { padding } = style;\n        const { baseTexture } = texture;\n\n        texture.trim.width = texture._frame.width = image.width / resolution;\n        texture.trim.height = texture._frame.height = image.height / resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(image.width, image.height, resolution);\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer\n     * @private\n     */\n    _render(renderer: Renderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Renders the object using the Canvas Renderer.\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The renderer\n     */\n    _renderCanvas(renderer: IRenderer)\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        super._renderCanvas(renderer);\n    }\n\n    /**\n     * Get the local bounds.\n     *\n     * @param {PIXI.Rectangle} rect - Input rectangle.\n     * @return {PIXI.Rectangle} Local bounds\n     */\n    getLocalBounds(rect: Rectangle)\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds(rect);\n    }\n\n    _calculateBounds()\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        (this as any)._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Handle dirty style changes\n     * @private\n     */\n    _onStyleChange()\n    {\n        this.dirty = true;\n    }\n\n    /**\n     * Destroy this Text object. Don't use after calling.\n     * @param {boolean|object} options - Same as Sprite destroy options.\n     */\n    destroy(options?: boolean | IDestroyOptions | undefined)\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, HTMLText.defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        const forceClear: any = null;\n\n        // Remove any loaded fonts if we created the HTMLTextStyle\n        if (this.ownsStyle)\n        {\n            this._style?.cleanFonts();\n        }\n        this._style = forceClear;\n        this._svgRoot?.remove();\n        this._svgRoot = forceClear;\n        this._domElement?.remove();\n        this._domElement = forceClear;\n        this._foreignObject?.remove();\n        this._foreignObject = forceClear;\n        this._styleElement?.remove();\n        this._styleElement = forceClear;\n\n        this._loadImage.src = '';\n        this._loadImage.onload = null;\n        this._loadImage = forceClear;\n        this._image.src = '';\n        this._image = forceClear;\n    }\n\n    /**\n     * Get the width in pixels.\n     * @member {number}\n     */\n    get width()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._image.width / this.resolution;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._image.width / this.resolution;\n        this._width = value;\n    }\n\n    /**\n     * Get the height in pixels.\n     * @member {number}\n     */\n    get height()\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._image.height / this.resolution;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this.updateText(true);\n\n        const s = utils.sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._image.height / this.resolution;\n        this._height = value;\n    }\n\n    /** The base style to render with text. */\n    get style(): HTMLTextStyle\n    {\n        return this._style as HTMLTextStyle;\n    }\n\n    set style(style: HTMLTextStyle | TextStyle | Partial<ITextStyle>) // eslint-disable-line require-jsdoc\n    {\n        // Don't do anything if we're re-assigning\n        if (this._style === style)\n        {\n            return;\n        }\n\n        style = style || {};\n\n        if (style instanceof HTMLTextStyle)\n        {\n            this.ownsStyle = false;\n            this._style = style;\n        }\n        // Clone TextStyle\n        else if (style instanceof TextStyle)\n        {\n            console.warn('[HTMLText] Cloning TextStyle, if this is not what you want, use HTMLTextStyle');\n\n            this.ownsStyle = true;\n            this._style = HTMLTextStyle.from(style);\n        }\n        else\n        {\n            this.ownsStyle = true;\n            this._style = new HTMLTextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /**\n     * Contents of text. This can be HTML text and include tags.\n     * @example\n     * const text = new HTMLText('This is a <em>styled</em> text!');\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(text) // eslint-disable-line require-jsdoc\n    {\n        text = String(text === '' || text === null || text === undefined ? ' ' : text);\n        text = this.sanitiseText(text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     * @member {number}\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number) // eslint-disable-line require-jsdoc\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n\n    /**\n     * Sanitise text - replace `<br>` with `<br/>`, `&nbsp;` with `&#160;`\n     * @see https://www.sitepoint.com/community/t/xhtml-1-0-transitional-xml-parsing-error-entity-nbsp-not-defined/3392/3\n     */\n    private sanitiseText(text: string): string\n    {\n        return text\n            .replace(/<br>/gi, '<br/>')\n            .replace(/<hr>/gi, '<hr/>')\n            .replace(/&nbsp;/gi, '&#160;');\n    }\n}\n"],"names":["_HTMLTextStyle","TextStyle","originalStyle","obj","prop","__spreadProps","__spreadValues","font","url","options","availableFonts","settings","response","blob","resolve","reject","src","reader","dataSrc","utils","fontFace","value","toAdd","v","toRemove","scale","result","color","alpha","x","y","position","prevFontsDirty","userAgent","_value","HTMLTextStyle","_HTMLText","Sprite","text","style","_a","image","texture","Texture","Rectangle","nssvg","nsxhtml","svgRoot","foreignObject","domElement","styleElement","overrides","_b","resolution","contentBounds","contentWidth","contentHeight","respectDirty","loadImage","width","height","svgURL","padding","baseTexture","renderer","rect","_c","_d","_e","forceClear","s","HTMLText"],"mappings":"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"}